CREATE TABLE IF NOT EXISTS Users  (
    ID VARCHAR(255) PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    role ENUM('Admin', 'User') NOT NULL,
    name VARCHAR(100),
    email VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS Recipes  (
    ID VARCHAR(255) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    externalPage VARCHAR(255),
    authorID VARCHAR(255),
    timeCreated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expectedTime INT,
    difficulty ENUM('Beginner', 'Intermediate', 'Advance', 'Unknown') DEFAULT 'Unknown' NOT NULL,
    description TEXT,
    instructions TEXT,
    FOREIGN KEY (authorID) REFERENCES Users(ID)
);

CREATE TABLE IF NOT EXISTS Ingredients  (
    ID VARCHAR(255) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    recipeID VARCHAR(255) NOT NULL,
    amount VARCHAR(255) NOT NULL,

    FOREIGN KEY (recipeID) REFERENCES Recipes(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Images  (
    ID VARCHAR(255) PRIMARY KEY,
    recipeID VARCHAR(255) NOT NULL,
    target VARCHAR(255) NOT NULL,
    FOREIGN KEY (recipeID) REFERENCES Recipes(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Groups  (
    ID VARCHAR(255) PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS ShoppingLists  (
    ID VARCHAR(255) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    groupID VARCHAR(255) NOT NULL,
    FOREIGN KEY (groupID) REFERENCES Groups(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS ShoppingItems  (
    ID VARCHAR(255) PRIMARY KEY,
    shoppingListID VARCHAR(255) NOT NULL,
    total INT NOT NULL,
    name VARCHAR(100) NOT NULL,
    completed BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (shoppingListID) REFERENCES ShoppingLists(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS Favorite  (
    userID VARCHAR(255) NOT NULL,
    recipeID VARCHAR(255) NOT NULL,

    FOREIGN KEY (userID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (recipeID) REFERENCES Recipes(ID) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS UsersGroupsTBL  (
    userID VARCHAR(255) NOT NULL,
    groupID VARCHAR(255) NOT NULL,

    FOREIGN KEY (userID) REFERENCES Users(ID) ON DELETE CASCADE,
    FOREIGN KEY (groupID) REFERENCES Groups(ID) ON DELETE CASCADE
);
